<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Wjpworking's Blog]]></title>
  <subtitle><![CDATA[new studying]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://wjpworking.github.io/"/>
  <updated>2015-11-22T10:07:23.444Z</updated>
  <id>http://wjpworking.github.io/</id>
  
  <author>
    <name><![CDATA[wjpworking]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Docker的使用]]></title>
    <link href="http://wjpworking.github.io/2015/11/22/docker%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://wjpworking.github.io/2015/11/22/docker的使用/</id>
    <published>2015-11-22T10:07:23.444Z</published>
    <updated>2015-11-22T10:07:23.444Z</updated>
    <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>在2013年还是2014年年初的时候，我当时在闲暇时刻去CSDN上面看资<br>料时，发现了关于docker的介绍，后来就再也没有关心过这样一个技<br>术。并且在当时还看到了对于go语言的简单介绍，说是这样一门语言<br>是由Google开发的要用来代替C预言的，我当时还在我的计算机上搭建<br>了一个Go语言的开发环境，并且还看了一些书籍，但是现在都完全的<br>忘记了，只知道当的论坛中对这门语言的评价不是太好，那时还是1.3<br>版本，编译器还是用C来写的。没有实现自举编译，现在1.5已经实现<br>自举编译了，这不说了，因为现在我也不会这一门语言，除了一些基<br>本的语法之外。虽然网络上已经有许多的安装方法了，但是我还是写<br>一下作为分享好了。</p>
<h2 id="网站">网站</h2><p><a href="www.docker.com">Docker官网</a><br><a href="https://github.com/Unknwon/the-way-to-go_ZH_CN" target="_blank" rel="external">The way to go中文版</a><br><a href="www.daocloud.io">Daocloud官网</a>:docker的一个镜像，挺好使得</p>
<h2 id="安装docker">安装docker</h2><p>鉴于国内的网速，还说使用快一点的镜像比较好，如果是企业的话就<br>不要考虑了，尽量使用商业的吧:<br>Linux<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># daocloud的下载指令</span></span><br><span class="line"><span class="comment"># curl -sSL https://get.daocloud.io/docker | sh</span></span><br><span class="line"><span class="comment"># docker下载指令</span></span><br><span class="line"><span class="comment"># wget -qO- https://get.docker.com/ | sh</span></span><br></pre></td></tr></table></figure></p>
<p>Windows和Mac上就直接使用官方的镜像了，不用考虑其他的了，因为<br>迅雷下这个还是挺快的</p>
<h2 id="安装daocloud的工具（不适用可直接跳过）">安装daocloud的工具（不适用可直接跳过）</h2><p>在Daocloud的Dashboard中的我的集群中根据步骤进行部署<br><img src="/img/dashboard.png" alt="Dashboard"><br>然后下载镜像的使用如下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dao pull youimages</span></span><br></pre></td></tr></table></figure></p>
<h2 id="直接下载命令">直接下载命令</h2><p>直接使用docker命令，如果使用了daocloud话会直接使用daocloud的<br>的加速模式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker pull yourimages</span></span><br></pre></td></tr></table></figure></p>
<h2 id="一个简单的docker实例，来自官方">一个简单的docker实例，来自官方</h2><p>输入如下指令；<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker run hello-world</span></span><br></pre></td></tr></table></figure></p>
<p>这时会下载一个hello-world的镜像，如果显示了如下的东西，则说明<br>你已经成功安装Docker了：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Hello <span class="built_in">from</span> Docker.</span><br><span class="line">This message shows that your installation appears <span class="built_in">to</span> be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took <span class="operator">the</span> following steps:</span><br><span class="line"> <span class="number">1.</span> The Docker client contacted <span class="operator">the</span> Docker daemon.</span><br><span class="line"> <span class="number">2.</span> The Docker daemon pulled <span class="operator">the</span> <span class="string">"hello-world"</span> image <span class="built_in">from</span> <span class="operator">the</span> Docker Hub.</span><br><span class="line"> <span class="number">3.</span> The Docker daemon created <span class="operator">a</span> <span class="built_in">new</span> container <span class="built_in">from</span> that image which runs <span class="operator">the</span></span><br><span class="line">    executable that produces <span class="operator">the</span> output you are currently reading.</span><br><span class="line"> <span class="number">4.</span> The Docker daemon streamed that output <span class="built_in">to</span> <span class="operator">the</span> Docker client, which sent <span class="keyword">it</span></span><br><span class="line">    <span class="built_in">to</span> your terminal.</span><br><span class="line"></span><br><span class="line">To <span class="keyword">try</span> something more ambitious, you can run <span class="operator">an</span> Ubuntu container <span class="operator">with</span>:</span><br><span class="line"> $ docker run -<span class="keyword">it</span> ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, <span class="operator">and</span> more <span class="operator">with</span> <span class="operator">a</span> free Docker Hub account:</span><br><span class="line"> <span class="keyword">https</span>://hub.docker.com</span><br><span class="line"></span><br><span class="line">For more examples <span class="operator">and</span> ideas, visit:</span><br><span class="line"> <span class="keyword">https</span>://docs.docker.com/userguide/</span><br></pre></td></tr></table></figure></p>
<p>然后这时你就可以根据你手中的书籍去学习docker了。</p>
<h2 id="后话">后话</h2><p>现在docker的<br>中文书籍比较少，我认为还是使用英文的官方文档比较好，这是你<br>需要加入一些社区去学习新的知识才能在以后的路上走的更加远。在和Docker同一时间出现的还有一个coreos的基于linux的操作系统，也<br>是应用于虚拟化方面的，我曾经想下了试过，但是很可惜我没有成功，但这也是现在容器技术的另外的一种形式。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="简介">简介</h2><p>在2013年还是2014年年初的时候，我当时在闲暇时刻去CSDN上面看资<br>料时，发现了关于docker的介绍，后来就再也没有关心过这样一个技<br>术。并且在当时还看到了对于go语言的简单介绍，说是这样一门语言<br>是由Goog]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[搭建博客的简单步骤]]></title>
    <link href="http://wjpworking.github.io/2015/11/21/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://wjpworking.github.io/2015/11/21/搭建博客/</id>
    <published>2015-11-21T13:39:40.493Z</published>
    <updated>2015-11-21T13:39:40.493Z</updated>
    <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>本来是想直接用官方给的主题的，但是我发现我不会使用这样一个主题，所有我只好学习了如何使用node.js和hexo主题<br>两件工具来搭建博客。本来我在大学的这三年的过程中是没有学过和这相关的东西，因为学的是软件工程专业，这方面学<br>校虽然也有一定的教授，但是还是和系统的学习有较大的差别。虽然在这其中还是有一些麻烦，但是在经过查找资料后，<br>已经将我先在遇到的大部分问题解决了，现在我来介绍如何搭建一个简单的博客。</p>
<h2 id="创建github账号及配置">创建github账号及配置</h2><p>在<a href="http://www.github.com" target="_blank" rel="external">Github</a>上申请账号，然后建立一个仓库（repository）,但是要设置为<code>public</code>的，名<br>称为yourusername.githun.io，这样就创建了一个仓库了。然后在此仓库中的<code>Settings</code>中的<code>option</code>中点击<code>Lanuch
 automatic page generator</code>，然后根据提示完成下面的步骤</p>
<h2 id="下载Git和Node-js">下载Git和Node.js</h2><p><a href="http://git-scm.com/download/" target="_blank" rel="external">Git下载地址</a><br><a href="https://nodejs.org/" target="_blank" rel="external">Node.js下载地址</a></p>
<h2 id="下载hexo">下载hexo</h2><p>在你要建立的目录下 执行以下指令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm install -g hexo</span></span><br><span class="line"><span class="comment"># hexo init [floder]</span></span><br><span class="line"><span class="comment"># npm install</span></span><br><span class="line"><span class="comment"># hexo server</span></span><br></pre></td></tr></table></figure></p>
<p>如果一切顺利，这时你就可以在地址栏中输入<code>127.0.0.1:4000</code>来查看演示网页了。</p>
<h2 id="创建页面">创建页面</h2><p>在<code>\source\_posts</code>新建你所需要的页面，文件格式为<code>.md</code>然后，执行以下指令<code># hexo server</code>,然后在浏览器中输入<br><code>127.0.0.1:4000</code>来查看你所建立的页面</p>
<h2 id="git同步">git同步</h2><p>执行<code>npm install hexo-deployer-git --save</code>来下载插件，然后在<code>_config.yml</code>进行配置，这是就可以使用<code>hexo deply</code><br>直接在github上进行部署了</p>
<h2 id="其余参考">其余参考</h2><p><a href="http://blog.fens.me/hexo-blog-github/" target="_blank" rel="external">Hexo在github上构建免费的Web应用</a><br><a href="http://wsgzao.github.io/post/hexo-guide/" target="_blank" rel="external">使用GitHub和Hexo搭建免费静态Blog</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="简介">简介</h2><p>本来是想直接用官方给的主题的，但是我发现我不会使用这样一个主题，所有我只好学习了如何使用node.js和hexo主题<br>两件工具来搭建博客。本来我在大学的这三年的过程中是没有学过和这相关的东西，因为学的是软件工程专业，这方面学<br]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[搭建这个博客的原因]]></title>
    <link href="http://wjpworking.github.io/2015/11/21/about/"/>
    <id>http://wjpworking.github.io/2015/11/21/about/</id>
    <published>2015-11-21T12:39:22.013Z</published>
    <updated>2015-11-21T12:39:22.013Z</updated>
    <content type="html"><![CDATA[<p>这是我在github搭建的博客，算是我以前的使用github的产生，虽然两年前以idwangmo的身份搭建了 一个github账号，但是前几天出于某种原因被我给删除了<br>，现在只只好重新建立一个账号，开始记录我从大三开始的学习过程</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这是我在github搭建的博客，算是我以前的使用github的产生，虽然两年前以idwangmo的身份搭建了 一个github账号，但是前几天出于某种原因被我给删除了<br>，现在只只好重新建立一个账号，开始记录我从大三开始的学习过程</p>
]]>
    </summary>
    
  </entry>
  
</feed>
