<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on 墨语的后花园</title>
    <link>https://www.idwangmo.top/tags/java/</link>
    <description>Recent content in Java on 墨语的后花园</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 13 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://www.idwangmo.top/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>队列、AQS和锁</title>
      <link>https://www.idwangmo.top/2020/08/13/blockingqueueandlock/</link>
      <pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.idwangmo.top/2020/08/13/blockingqueueandlock/</guid>
      <description>CopyOnWriteArrayList 应用于读多写少的环境中，根据类注释，可以直到在所有可变操作（add、set和remove）的时候是创建底层数组副本来实现的。 从源码来看，g</description>
    </item>
    
    <item>
      <title>多线程基础</title>
      <link>https://www.idwangmo.top/2020/08/06/muiti-thread/</link>
      <pubDate>Thu, 06 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.idwangmo.top/2020/08/06/muiti-thread/</guid>
      <description>同类的多个线程共享堆的方法区，但每个线程拥有自己的程序计数器、虚拟机栈和本地方法栈。 死锁的形成一定能在状态上找到一个环，可以参考死锁产生的必</description>
    </item>
    
    <item>
      <title>ConcurrentHashMap源码阅读</title>
      <link>https://www.idwangmo.top/2020/08/05/concurrenthashmap/</link>
      <pubDate>Wed, 05 Aug 2020 23:48:20 +0800</pubDate>
      
      <guid>https://www.idwangmo.top/2020/08/05/concurrenthashmap/</guid>
      <description>线程安全，在类注释中就直接表面这个是为了替代HashTale来实现的，并且兼容HashTable的操作方法。 1.7版本 内部维护了一个Segm</description>
    </item>
    
    <item>
      <title>HashMap源码阅读</title>
      <link>https://www.idwangmo.top/2020/08/04/hashmap/</link>
      <pubDate>Tue, 04 Aug 2020 21:19:24 +0800</pubDate>
      
      <guid>https://www.idwangmo.top/2020/08/04/hashmap/</guid>
      <description>1.8之前是数组+链表构成，1.8改成了当阈值为8的时候，将链表转换为红黑树（当链表长度小于64的时候是会进行扩容而不是直接转红黑树），在键</description>
    </item>
    
    <item>
      <title>ArrayList源码阅读</title>
      <link>https://www.idwangmo.top/2020/08/02/arraylist/</link>
      <pubDate>Sun, 02 Aug 2020 18:13:04 +0800</pubDate>
      
      <guid>https://www.idwangmo.top/2020/08/02/arraylist/</guid>
      <description>底层使用Object[]实现，操作受到底层数组实现的限制，在指定位置插入和删除元素的操作的时候会大量消耗性能，在末尾插入唯一消耗性能的是扩容</description>
    </item>
    
    <item>
      <title>Java8实战</title>
      <link>https://www.idwangmo.top/2017/03/02/java8inaction/</link>
      <pubDate>Thu, 02 Mar 2017 22:21:39 +0000</pubDate>
      
      <guid>https://www.idwangmo.top/2017/03/02/java8inaction/</guid>
      <description>思维导图 一 为什么使用Java8 在Java 8中加入 Streams 可以看作把另外两项扩充加入Java 8的直接原因：把代码传递给方法的简洁方式（方法引用、La</description>
    </item>
    
    <item>
      <title>根据源代码修改XSD文件</title>
      <link>https://www.idwangmo.top/2017/02/21/javadom/</link>
      <pubDate>Tue, 21 Feb 2017 23:29:56 +0000</pubDate>
      
      <guid>https://www.idwangmo.top/2017/02/21/javadom/</guid>
      <description>前言 这是前端时间遇到的问题，是去年12月份的发生的事情了，当时写了博客，不过是发布在OSchina上面的，现在我将它转移到这里 正文 这两天遇到</description>
    </item>
    
  </channel>
</rss>
